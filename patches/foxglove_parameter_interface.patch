--- src/ros-foxglove-bridge-original/ros2_foxglove_bridge/src/parameter_interface.cpp
+++ src/ros-foxglove-bridge/ros2_foxglove_bridge/src/parameter_interface.cpp
@@ -94,25 +94,25 @@ static foxglove::Parameter fromRosParam(const rclcpp::Parameter& p) {
   } else if (type == rclcpp::ParameterType::PARAMETER_BOOL_ARRAY) {
     std::vector<foxglove::ParameterValue> paramVec;
     for (const auto value : p.as_bool_array()) {
-      paramVec.push_back(value);
+      paramVec.emplace_back(value);
     }
     return foxglove::Parameter(p.get_name(), paramVec);
   } else if (type == rclcpp::ParameterType::PARAMETER_INTEGER_ARRAY) {
     std::vector<foxglove::ParameterValue> paramVec;
     for (const auto value : p.as_integer_array()) {
-      paramVec.push_back(value);
+      paramVec.emplace_back(value);
     }
     return foxglove::Parameter(p.get_name(), paramVec);
   } else if (type == rclcpp::ParameterType::PARAMETER_DOUBLE_ARRAY) {
     std::vector<foxglove::ParameterValue> paramVec;
     for (const auto value : p.as_double_array()) {
-      paramVec.push_back(value);
+      paramVec.emplace_back(value);
     }
     return foxglove::Parameter(p.get_name(), paramVec);
   } else if (type == rclcpp::ParameterType::PARAMETER_STRING_ARRAY) {
     std::vector<foxglove::ParameterValue> paramVec;
     for (const auto& value : p.as_string_array()) {
-      paramVec.push_back(value);
+      paramVec.emplace_back(value);
     }
     return foxglove::Parameter(p.get_name(), paramVec);
   } else {
